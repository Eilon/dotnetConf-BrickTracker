@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@inject AppState AppState

<PageTitle>Index</PageTitle>

<h3>Upload Files</h3>

<p>
    <label>
        Upload brick collections:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    if (AppState.SetCollections.Count == 0)
    {
        <div>No collections!</div>
    }
    else
    {
        foreach (var setCollection in AppState.SetCollections)
        {
            <div>
                <h1>@setCollection.Name</h1>
                <CollectionSummary Sets=setCollection />
            </div>
        }
    }
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1 * 1024 * 1024;
    private int maxAllowedFiles = 3;
    private bool isLoading;


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        var uploadedSetCollections = new List<BrickSetCollection>();


        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                using var inputFileStream = file.OpenReadStream(maxFileSize);

                var bsc = new BrickSetCollection()
                    {
                        Name = Path.GetFileNameWithoutExtension(file.Name),
                    };
                await bsc.LoadSets(inputFileStream);

                uploadedSetCollections.Add(bsc);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        AppState.SetCollections = uploadedSetCollections;

        isLoading = false;
    }
}
