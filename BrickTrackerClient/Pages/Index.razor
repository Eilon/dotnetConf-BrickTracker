@page "/"
@using System.IO
@using Microsoft.Maui.Essentials

<h1>Hello, world!</h1>

Welcome to your new app.

<button @onclick=OnPickFile>Open a file</button>

@if (_setCollections.Count == 0)
{
    <div>Loading...</div>
}
else
{
    foreach (var setCollection in _setCollections)
    {
        <div @key=@setCollection.SetCollection.Name>
            <h1>@setCollection.SetCollection.Name</h1>
            <CollectionSummary Sets=setCollection.SetCollection />
        </div>
    }
}

@code
{
    List<SetCollectionItem> _setCollections = new();

    class SetCollectionItem
    {
        public BrickSetCollection SetCollection { get; set; }
        public bool AutoGenerated { get; set; }
        public string FilePath { get; set; }
    }

    const string CsvSearchPattern = "*.csv";
    readonly string DataFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");

    protected override async Task OnInitializedAsync()
    {
        // Load existing CSVs
        await UpdateCsvList();

        // Watch for any new CSVs
        //var fsw = new FileSystemWatcher(DataFolder, CsvSearchPattern);
        //fsw.Changed += OnFileSystemChanged;
        //fsw.Created += OnFileSystemChanged;
        //fsw.Deleted += OnFileSystemChanged;
        //fsw.Renamed += OnFileSystemChanged;
        //fsw.EnableRaisingEvents = true;
    }

    async Task UpdateCsvList()
    {
        //var foundCsvPaths = Directory.GetFiles(DataFolder, CsvSearchPattern);

        //var loadedCsvPaths = _setCollections.Select(c => c.FilePath);
        //var csvPathsToRemove = loadedCsvPaths.Except(foundCsvPaths);
        //var csvPathsToAdd = foundCsvPaths.Except(loadedCsvPaths);

        //_setCollections = _setCollections.Where(sc => !csvPathsToRemove.Contains(sc.FilePath)).ToList();

        //foreach (var csvPathToAdd in csvPathsToAdd)
        //{
        //    await AddCsvSet(csvPathToAdd);
        //}
    }

    async Task AddCsvSet(string fullPath)
    {
        using var fileStream = File.Open(fullPath, FileMode.Open, FileAccess.Read);
        var bsc = new BrickSetCollection()
            {
                Name = Path.GetFileNameWithoutExtension(fullPath),
            };
        await bsc.LoadSets(fileStream);
        _setCollections.Add(new SetCollectionItem { FilePath = fullPath, SetCollection = bsc, AutoGenerated = true });
    }

    async void OnFileSystemChanged(object sender, EventArgs e)
    {
        // Whenever any file system change happens, re-scan everything to get the current state
        await UpdateCsvList();

        // And then update the Blazor UI
        await InvokeAsync(() => StateHasChanged());
    }

    async Task OnPickFile()
    {
        var x = await FilePicker.PickAsync(new PickOptions
            {
                PickerTitle = "Pick a CSV file",
            });
            var f = x.FileName;


        using var fileStream = await x.OpenReadAsync();
        var bsc = new BrickSetCollection()
            {
                Name = Path.GetFileNameWithoutExtension(f),
            };
        await bsc.LoadSets(fileStream);
        _setCollections.Add(new SetCollectionItem { FilePath = f, SetCollection = bsc, AutoGenerated = false });
    }
}
