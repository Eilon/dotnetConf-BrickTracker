@if (Sets == null)
{
    <div>Loading brick sets...</div>
}
else
{
    <div>@Sets.Sets.Count sets in collection</div>
    <ul>
        @foreach (var themeSets in Sets.Sets.GroupBy(s => s.Theme).OrderByDescending(t => t.Count()))
        {
            <li><p class="setTheme">@themeSets.Key (@themeSets.Count())</p>

                <table class="table">
                  <thead>
                    <tr>
                      <th scope="col">#</th>
                      <th scope="col">Name</th>
                      <th scope="col">Pieces</th>
                      <th scope="col">Volume</th>
                    </tr>
                  </thead>
                  <tbody>
                    @foreach (var set in themeSets.OrderByDescending(s => s.Pieces ?? 0).Take(10))
                    {
                        <tr>
                          <th scope="row">@set.Number</th>
                          <td>@set.Set_name</td>
                          <td>@set.Pieces</td>
                          <td>@GetVolumeString(set)</td>
                        </tr>
                    }
                    @if (themeSets.Count() > 10)
                    {
                        <tr>
                          <td colspan="4" class="table-warning">... @(themeSets.Count() - 10) set(s) not shown.</td>
                        </tr>
                    }
                  </tbody>
                </table>
            </li>
        }
    </ul>
}

@code
{
    [Parameter] public BrickSetCollection? Sets { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    private decimal? GetVolume(BrickSetItem set)
    {
        var volume = set.Width * set.Height * set.Depth;
        return volume;
    }

    private string GetVolumeString(BrickSetItem set)
    {
        var volume = GetVolume(set);
        if (volume == null)
        {
            return string.Empty;
        }
        return string.Format("{0:n0}cm³", volume);
    }
}
